datasource db {
    provider          = "postgresql"
    url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
    provider = "prisma-client-js"
}

enum Gender {
    MALE
    FEMALE
    NONE
}

enum FileType {
    PNG
    JPG
    JPEG
    AVIF
    WEBP
}

enum RoomType {
    LUXE
    DEFAULT
    PREMIUM
    PRESIDENT
}

model User {
    id                       Int       @id @default(autoincrement())
    name                     String?
    lastname                 String?
    sex                      Gender    @default(NONE)
    date_birthday            DateTime?
    is_accept_special_demand Boolean
    email                    String    @unique
    password                 String
    createdAt                DateTime  @default(now())
    updatedAt                DateTime  @updatedAt

    bookings Booking[] // показываем связь
    comments Comment[]
    likes    Like[]
}

model Booking {
    id       Int      @id @default(autoincrement())
    checkIn  DateTime
    checkOut DateTime
    created  DateTime @default(now())
    updated  DateTime @updatedAt

    Room   Room? @relation(fields: [roomId], references: [id])
    roomId Int?
    User   User? @relation(fields: [userId], references: [id])
    userId Int?

    comments Comment[]
}

model Room {
    id                        Int      @id @default(autoincrement())
    number                    Int      @unique
    type                      RoomType @default(DEFAULT)
    day_price                 Int
    services_price            Int
    additional_services_price Int
    is_deleted                Boolean  @default(false)
    from_disabled             Boolean  @default(false)
    area                      Int
    hall_width                Int
    badrooms                  Int      @default(1)
    bads                      Int      @default(1)
    bathrooms                 Int      @default(0)
    created                   DateTime @default(now())
    updated                   DateTime @updatedAt

    rules    Rule[]
    bookings Booking[]
    images   Images[]
}

model Comment {
    id      Int      @id @default(autoincrement())
    image   String?
    created DateTime @default(now())

    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    Booking   Booking? @relation(fields: [bookingId], references: [id])
    bookingId Int?
    likes     Like[]
}

model Like {
    id      Int      @id @default(autoincrement())
    created DateTime @default(now())
    updated DateTime @updatedAt

    user      User    @relation(fields: [userId], references: [id])
    userId    Int
    comment   Comment @relation(fields: [commentId], references: [id])
    commentId Int
}

model Rule {
    id      Int      @id @default(autoincrement())
    text    String   @unique
    created DateTime @default(now())
    updated DateTime @updatedAt

    room   Room @relation(fields: [roomId], references: [id])
    roomId Int
}

model Images {
    id      Int      @id @default(autoincrement())
    link    String
    type    FileType
    created DateTime @default(now())
    updated DateTime @updatedAt

    Room   Room? @relation(fields: [roomId], references: [id])
    roomId Int?
}
